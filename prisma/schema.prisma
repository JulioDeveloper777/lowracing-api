// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

model User {
  id            String         @id
  username      String?        @unique
  email         String         @unique
  password      String
  Profile       Profile?
  role          Roles          @default(USER)
  isPremium     Boolean        @default(false)
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  notifications Notification[]
  Tokens        Tokens[]       @relation("Tokens")
  Player        Player?        @relation("Player")

  @@map("users")
}

model Profile {
  id        String     @id @default(uuid())
  nickname  String?
  slug      String?    @unique
  avatar    String?
  cover     String?
  bio       String?
  link      String?
  userId    String     @unique
  badges    Badges[]
  Posts     Post[]
  followers Follower[] @relation("followers")
  following Follower[] @relation("following")
  User      User       @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Badges {
  id        String   @id
  name      String
  image     String
  user      Profile  @relation(fields: [userid], references: [userId])
  userid    String
  createdAt DateTime @default(now())

  @@map("badges")
}

model Notification {
  id      String  @id @default(uuid())
  read    Boolean @default(false)
  title   String?
  content String?
  small   String
  user    User    @relation(fields: [userid], references: [id])
  userid  String

  @@map("notifications")
}

model Post {
  id        String    @id @default(uuid())
  content   String
  asset     String?
  published Boolean   @default(true)
  author    Profile   @relation(fields: [authorId], references: [userId])
  Likes     Likes[]   @relation("likes")
  Comment   Comment[] @relation("comments")
  authorId  String
  createdAt DateTime  @default(now())
}

model Likes {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  post      Post     @relation("likes", fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation("comments", fields: [postId], references: [id])
  postId    String
  authorId  String
  content   String
  asset     String?
  createdAt DateTime @default(now())
}

model Follower {
  id           String  @id
  followers    Profile @relation("followers", fields: [followers_id], references: [userId])
  followers_id String
  following_id String
  following    Profile @relation("following", fields: [following_id], references: [userId])

  @@map("followers")
}

model Trending {
  id        String   @id
  hashtag   String
  counter   Int      @default(1)
  updatedAt DateTime @default(now())

  @@map("trendings")
}

model Tokens {
  id        String  @id @default(uuid())
  used      Boolean @default(false)
  type      String
  user_id   String
  user      User    @relation("Tokens", fields: [user_id], references: [id])
  expiresIn Int

  @@map("tokens")
}

model Update {
  id         String   @id @unique @default(uuid())
  product    String
  version    String
  download   String
  release    DateTime @default(now())
  changelogs String

  @@map("updates")
}

model Player {
  id       String          @id @unique @default(uuid())
  nickname String          @unique
  money    Decimal
  user     User            @relation("Player", fields: [nickname], references: [username])
  vehicles PlayerVehicle[]

  @@map("players")
}

model Vehicle {
  id            String          @id @default(uuid())
  name          String
  type          String
  price         Decimal
  createdAt     DateTime        @default(now())
  PlayerVehicle PlayerVehicle[]

  @@map("game_vehicles")
}

model PlayerVehicle {
  id          String   @id @default(uuid())
  playerId    String
  vehicleId   String
  purchasedIn DateTime @default(now())
  player      Player   @relation(fields: [playerId], references: [id])
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@map("player_vehicles")
}
