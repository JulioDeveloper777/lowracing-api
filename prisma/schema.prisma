// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

model User {
  id       String      @id
  name     String
  slug     String      @unique
  email    String      @unique
  password String
  bio      String?
  link     String?
  role Roles @default(USER)
  isVerified Boolean @default(false)
  isPremium Boolean @default(false)
  avatar   String      @default("default.jpg")
  cover    String      @default("default.jpg")
  createdAt DateTime @default(now())
  tweets   Tweet[] @relation("Tweet")
  likes    TweetLike[] @relation("TweetLike")
  Tokens Tokens[] @relation("Tokens")
}

model Tweet {
  id        String         @id @default(uuid())
  authorId  String
  body      String
  image     String?
  createdAt DateTime    @default(now())
  answerOf  Int         @default(0)
  user      User        @relation("Tweet", fields: [authorId], references: [id])
  likes     TweetLike[] @relation("TweetLike")
}

model TweetLike {
  id       String    @id @default(uuid())
  userId String
  tweetId  String
  user     User   @relation("TweetLike", fields: [userId], references: [id])
  tweet    Tweet  @relation("TweetLike",fields: [tweetId], references: [id])
}

model Follow {
  id        String    @id
  userId1   String
  userId2   String
}

model Trend {
  id        String      @id
  hashtag   String
  counter   Int      @default(1)
  updatedAt DateTime @default(now())
}

model Tokens {
  id        String @id @default(uuid())
  used      Boolean @default(false)
  type      String
  user_id   String
  user User @relation("Tokens", fields: [user_id], references: [id])
  expiresIn Int
}